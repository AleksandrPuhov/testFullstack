// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    // directUrl = env("DIRECT_URL")
}

plugin hooks {
    provider = '@zenstackhq/tanstack-query'
    output = "./src/lib/hooks"
    target = "react"
    useSuperJson = true
}

// Necessary for Next auth
model Profile {
    id String @id @default(cuid())
    userId Int @map("user_id")
    type String
    provider String
    providerAccountId String @map("provider_account_id")
    refresh_token String?
    access_token String?
    expires_at Int?
    token_type String?
    scope String?
    id_token String?
    session_state String?
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id String @id @default(cuid())
    sessionToken String @unique @map("session_token")
    userId Int @map("user_id")
    expires DateTime
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id Int @id @default(autoincrement())
    name String?
    email String? @unique
    password String @password @omit

    accounts Account[]
    profiles Profile[]
    sessions Session[]
    transactions Transaction[]
    accountGroups AccountGroup[]
    category Category[]
    contractor Contractor[]

    @@allow('read,create', true)
    @@allow('update,delete', auth() == this)
}

model VerificationToken {
    identifier String
    token String @unique
    expires DateTime

    @@unique([identifier, token])
}

model Category {
    id String @id @default(cuid())
    name String @length(1, 255)
    type TransactionType
    parentId String? @map("parent_id")
    description String?
    archived Boolean @default(false)
    userId Int @map("user_id")

    parent Category? @relation("CategoryToCategory", fields: [parentId], references: [id], onUpdate: Cascade, onDelete: SetNull)
    categories Category[] @relation("CategoryToCategory")
    transactions Transaction[]
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@deny('all', auth() == null)
    @@allow('all', auth() != null)
}

model Currency {
    id String @id @default(cuid())
    name String @length(1, 255)
    code String @length(1, 50) @unique
    symbol String @length(1, 50)
    decimalDigits Int @default(2) @map("decimal_digits")

    accounts Account[]

    @@allow('read', auth() != null)
}

model Account {
    id String @id @default(cuid())
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")
    userId Int @map("user_id")
    name String @length(1, 255)
    type AccountType
    balance Decimal @default(0)
    balanceDate DateTime @default(now()) @map("balance_date")
    groupId String @map("group_id")
    currencyId String @map("currency_id")
    archived Boolean @default(false)
    hideInTotal Boolean @default(false) @map("hide_in_total")
    number String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    group AccountGroup @relation(fields: [groupId], references: [id])
    currency Currency @relation(fields: [currencyId], references: [id])

    transactions Transaction[] @relation(name: "TransactionSourceAccountToAccount")
    destinationTransactions Transaction[] @relation(name: "TransactionDestinationAccountToAccount")

    @@allow('all', auth() != null)
}

enum AccountType {
    CASH
    BANK_ACCOUNT
    CREDIT_CARD
}

model AccountGroup {
    id String @id @default(cuid())
    name String
    archived Boolean @default(false)
    userId Int @map("user_id")

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    accounts Account[]

    @@allow('all', auth() != null)
}

model Transaction {
    id Int @id @default(autoincrement())
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")
    updatedBy Int? @map("updated_by")
    type TransactionType
    amount Decimal
    amountDestination Decimal? @map("amount_destination")
    creatorId Int @map("creator_id")
    categoryId String @map("category_id")
    contractorId String? @map("contractor_id")
    date DateTime @default(now())
    description String?
    accountId String @map("account_id")
    destinationAccountId String? @map("destination_account_id")
    currency String @map("currency_account")
    currencyDestination String? @map("currency_destination_account")
    currencyRate Decimal?

    creator User @relation(fields: [creatorId], references: [id])
    category Category @relation(fields: [categoryId], references: [id])
    contractor Contractor? @relation(fields: [contractorId], references: [id])
    account Account @relation("TransactionSourceAccountToAccount", fields: [accountId], references: [id])
    destinationAccount Account? @relation("TransactionDestinationAccountToAccount", fields: [destinationAccountId], references: [id])

    // @@unique([accountId, destinationAccountId])

    @@allow('all', auth() == creator)
    @@allow('read', auth() != null)
}

enum TransactionType {
    INCOME
    OUTCOME
    TRANSFER
}

model Contractor {
    id String @id @default(cuid())
    name String
    inn String?
    accountNumber String? @map("account_number")
    description String?
    archived Boolean @default(false)
    userId Int @map("user_id")

    transactions Transaction[]
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@allow('all', auth() != null)
}

model AuditLog {
    type AuditLogType
    id String @id @default(cuid())
    createdAt DateTime @default(now()) @map("created_at")
    userId Int @map("user_id")
    subjectType SubjectTypes @map("subject_type")
    subjectId String? @map("subject_id")
    previousValue Json? @map("previous_value")
    newValue Json? @map("new_value")

    @@allow('read,create', auth() != null)
}

enum AuditLogType {
    CREATED
    UPDATED
    DELETED
    FAILED
}

enum SubjectTypes {
    ACCOUNT
    ACCOUNT_GROUP
    CATEGORY
    CONTRACTOR
    CURRENCY
    TRANSACTION
}